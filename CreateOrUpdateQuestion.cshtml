@using Health.Web.Web.Framework
@using Newtonsoft.Json
@using Health.Common
@model Health.Web.Areas.Products.Models.Question.QuestionViewModel
@{
    Layout = null;
    var actionName = ViewContext.RouteData.GetRequiredString("action");
    var controllerName = ViewContext.RouteData.Values["controller"].ToString();

    ViewBag.Title = "Yeni Soru Kaydı";
}
<link href="~/assets/global/plugins/jquery-multi-select/css/multi-select.css" rel="stylesheet" type="text/css" />
<style>
    div.modal-body label.mt-checkbox {
        margin-bottom: 0;
    }
</style>

<div class="modal-header">
    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
    <h4 class="modal-title" id="myModalLabel">@ViewBag.Title</h4>
</div>
@using (Html.BeginForm(actionName, controllerName, FormMethod.Post, new { Id = actionName + "Form" }))
{
    @Html.AntiForgeryToken()
    <div class="modal-body">
        <div class="form-horizontal">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            @Html.HiddenFor(model => model.Id)
            <div class="form-group">
                @Html.LabelFor(model => model.Name, new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.TextBoxFor(model => model.Name, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Text, new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.TextAreaFor(model => model.Text, new { @class = "form-control", rows = 3 })
                    @Html.ValidationMessageFor(model => model.Text, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.QuestionType, new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.DropDownListFor(model => model.QuestionType, EnumHelper<HinsuraEnums.QuestionType>.GetSelectList(), "", new { @class = "form-control select2" })
                    @Html.ValidationMessageFor(model => model.QuestionType, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group string-container number-container">
                @Html.LabelFor(model => model.DefaultAnswerText, new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.TextAreaFor(model => model.DefaultAnswerText, new { @class = "form-control", rows = 3 })
                    @Html.ValidationMessageFor(model => model.DefaultAnswerText, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group answer-source-container">
                @Html.LabelFor(model => model.AnswerSourceType, new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.DropDownListFor(model => model.AnswerSourceType, EnumHelper<HinsuraEnums.AnswerSourceType>.GetSelectList(), "", new { @class = "form-control select2" })
                    @Html.ValidationMessageFor(model => model.AnswerSourceType, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group string-container">
                @Html.LabelFor(model => model.MaxLength, new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.MaxLength, new { hasIcon = true, hasClearBtn = true })
                    @Html.ValidationMessageFor(model => model.MaxLength, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group number-container">
                @Html.LabelFor(model => model.MinValue, new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.MinValue, new { hasIcon = true, hasClearBtn = true })
                    @Html.ValidationMessageFor(model => model.MaxLength, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group number-container">
                @Html.LabelFor(model => model.MaxValue, new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.MaxLength, new { hasIcon = true, hasClearBtn = true })
                    @Html.ValidationMessageFor(model => model.MaxLength, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.IsRequired, new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    <label class="mt-checkbox">
                        @Html.CheckBoxFor(model => model.IsRequired)
                        <span></span>
                    </label>
                    @Html.ValidationMessageFor(model => model.IsRequired, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.IsVisibleByDefault, new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    <label class="mt-checkbox">
                        @Html.CheckBoxFor(model => model.IsVisibleByDefault)
                        <span></span>
                    </label>
                    @Html.ValidationMessageFor(model => model.IsVisibleByDefault, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.HelpText, new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.TextAreaFor(model => model.HelpText, new { @class = "form-control", rows = 2 })
                    @Html.ValidationMessageFor(model => model.HelpText, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    </div>
    <div class="modal-footer">
        <button class="btn" type="button" data-dismiss="modal"><i class="fa fa-times"></i> İptal</button>
        <button class="btn btn-primary" type="submit" name="save-and-close"><i class="fa fa-check"></i> Kaydet</button>
    </div>
}


<script src="~/assets/global/plugins/jquery-multi-select/js/jquery.multi-select.js" type="text/javascript"></script>
<script>
    App.initAjax();
    $(document).ready(function () {
        debugger;
        function updateAnswerSourceVisibility() {
            var selectedType = $('#QuestionType').val();
            var allowedTypes = ["MultipleChoice_Single", "MultipleChoice_Multiple", "Dropdown"];
            var stringTypes = ["ShortText","Paragraph","Email","Phone","Url"];
            var numberTypes = ["Integer", "Double", "Decimal", "Currency", "Slider"];

            if (allowedTypes.includes(selectedType)) {
                $('.answer-source-container').show();
            } else {
                $('.answer-source-container').hide();
            }

            if (stringTypes.includes(selectedType)) {
                $('.string-container').show();
            } else {
                $('.string-container').hide();
            }

            if (numberTypes.includes(selectedType)) {
                $('.number-container').show();
            } else {
                $('.number-container').hide();
            }
        }

        $('#QuestionType').on("select2:select", updateAnswerSourceVisibility);
        updateAnswerSourceVisibility();
    });
</script>
@Html.RenderScripts()